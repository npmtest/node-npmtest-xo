{"/home/travis/build/npmtest/node-npmtest-xo/test.js":"/* istanbul instrument in package npmtest_xo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xo/lib.npmtest_xo.js":"/* istanbul instrument in package npmtest_xo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xo.__dirname + '/lib.npmtest_xo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xo/node_modules/xo/index.js":"'use strict';\nconst path = require('path');\nconst eslint = require('eslint');\nconst globby = require('globby');\nconst isEqual = require('lodash.isequal');\nconst multimatch = require('multimatch');\nconst arrify = require('arrify');\nconst optionsManager = require('./options-manager');\n\nexports.lintText = (str, opts) => {\n\topts = optionsManager.preprocess(opts);\n\n\tif (opts.overrides && opts.overrides.length > 0) {\n\t\tconst overrides = opts.overrides;\n\t\tdelete opts.overrides;\n\n\t\tconst filename = path.relative(opts.cwd, opts.filename);\n\n\t\tconst foundOverrides = optionsManager.findApplicableOverrides(filename, overrides);\n\t\topts = optionsManager.mergeApplicableOverrides(opts, foundOverrides.applicable);\n\t}\n\n\topts = optionsManager.buildConfig(opts);\n\tconst defaultIgnores = optionsManager.getIgnores({}).ignores;\n\n\tif (opts.ignores && !isEqual(defaultIgnores, opts.ignores) && typeof opts.filename !== 'string') {\n\t\tthrow new Error('The `ignores` option requires the `filename` option to be defined.');\n\t}\n\n\tif (opts.filename) {\n\t\tconst filename = path.relative(opts.cwd, opts.filename);\n\t\tconst gitIgnores = optionsManager.getGitIgnores(opts);\n\t\tconst glob = [filename].concat(gitIgnores);\n\n\t\tif (multimatch(glob, opts.ignores).length > 0) {\n\t\t\treturn {\n\t\t\t\terrorCount: 0,\n\t\t\t\twarningCount: 0,\n\t\t\t\tresults: [{\n\t\t\t\t\terrorCount: 0,\n\t\t\t\t\tfilePath: filename,\n\t\t\t\t\tmessages: [],\n\t\t\t\t\twarningCount: 0\n\t\t\t\t}]\n\t\t\t};\n\t\t}\n\t}\n\n\tconst engine = new eslint.CLIEngine(opts);\n\tconst report = engine.executeOnText(str, opts.filename);\n\n\treturn processReport(report, opts);\n};\n\nexports.lintFiles = (patterns, opts) => {\n\topts = optionsManager.preprocess(opts);\n\tpatterns = patterns.length === 0 ? ['**/*'] : arrify(patterns);\n\n\tconst gitIgnores = optionsManager.getGitIgnores(opts);\n\tconst glob = patterns.concat(gitIgnores);\n\n\treturn globby(glob, {ignore: opts.ignores, nodir: true}).then(paths => {\n\t\t// Filter out unwanted file extensions\n\t\t// for silly users that don't specify an extension in the glob pattern\n\t\tpaths = paths.filter(x => {\n\t\t\t// Remove dot before the actual extension\n\t\t\tconst ext = path.extname(x).replace('.', '');\n\t\t\treturn opts.extensions.indexOf(ext) !== -1;\n\t\t});\n\n\t\tif (!(opts.overrides && opts.overrides.length > 0)) {\n\t\t\treturn runEslint(paths, opts);\n\t\t}\n\n\t\tconst overrides = opts.overrides;\n\t\tdelete opts.overrides;\n\n\t\tconst grouped = optionsManager.groupConfigs(paths, opts, overrides);\n\n\t\treturn mergeReports(grouped.map(data => runEslint(data.paths, data.opts)));\n\t});\n};\n\nfunction mergeReports(reports) {\n\t// Merge multiple reports into a single report\n\tlet results = [];\n\tlet errorCount = 0;\n\tlet warningCount = 0;\n\n\treports.forEach(report => {\n\t\tresults = results.concat(report.results);\n\t\terrorCount += report.errorCount;\n\t\twarningCount += report.warningCount;\n\t});\n\n\treturn {\n\t\terrorCount,\n\t\twarningCount,\n\t\tresults\n\t};\n}\n\nfunction runEslint(paths, opts) {\n\tconst config = optionsManager.buildConfig(opts);\n\tconst engine = new eslint.CLIEngine(config);\n\tconst report = engine.executeOnFiles(paths, config);\n\n\treturn processReport(report, opts);\n}\n\nfunction processReport(report, opts) {\n\treport.results = opts.quiet ? eslint.CLIEngine.getErrorResults(report.results) : report.results;\n\treturn report;\n}\n\nexports.getFormatter = eslint.CLIEngine.getFormatter;\nexports.getErrorResults = eslint.CLIEngine.getErrorResults;\nexports.outputFixes = eslint.CLIEngine.outputFixes;\n","/home/travis/build/npmtest/node-npmtest-xo/node_modules/xo/options-manager.js":"'use strict';\nconst os = require('os');\nconst path = require('path');\nconst arrify = require('arrify');\nconst pkgConf = require('pkg-conf');\nconst deepAssign = require('deep-assign');\nconst multimatch = require('multimatch');\nconst resolveFrom = require('resolve-from');\nconst pathExists = require('path-exists');\nconst parseGitignore = require('parse-gitignore');\nconst globby = require('globby');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/bower_components/**',\n\t'coverage/**',\n\t'{tmp,temp}/**',\n\t'**/*.min.js',\n\t'**/bundle.js',\n\t'fixture{-*,}.{js,jsx}',\n\t'fixture{s,}/**',\n\t'{test,tests,spec,__tests__}/fixture{s,}/**',\n\t'vendor/**',\n\t'dist/**'\n];\n\nconst DEFAULT_EXTENSION = [\n\t'js',\n\t'jsx'\n];\n\nconst DEFAULT_CONFIG = {\n\tuseEslintrc: false,\n\tcache: true,\n\tcacheLocation: path.join(os.homedir() || os.tmpdir(), '.xo-cache/'),\n\tbaseConfig: {\n\t\textends: [\n\t\t\t'xo',\n\t\t\tpath.join(__dirname, 'config/overrides.js'),\n\t\t\tpath.join(__dirname, 'config/plugins.js')\n\t\t]\n\t}\n};\n\nconst normalizeOpts = opts => {\n\topts = Object.assign({}, opts);\n\n\t// Alias to help humans\n\t[\n\t\t'env',\n\t\t'global',\n\t\t'ignore',\n\t\t'plugin',\n\t\t'rule',\n\t\t'setting',\n\t\t'extend',\n\t\t'extension'\n\t].forEach(singular => {\n\t\tconst plural = singular + 's';\n\t\tlet value = opts[plural] || opts[singular];\n\n\t\tdelete opts[singular];\n\n\t\tif (value === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (singular !== 'rule' && singular !== 'setting') {\n\t\t\tvalue = arrify(value);\n\t\t}\n\n\t\topts[plural] = value;\n\t});\n\n\treturn opts;\n}\n\nconst mergeWithPkgConf = opts => {\n\topts = Object.assign({cwd: process.cwd()}, opts);\n\tconst conf = pkgConf.sync('xo', {cwd: opts.cwd, skipOnFalse: true});\n\treturn Object.assign({}, conf, opts);\n}\n\n// Define the shape of deep properties for deepAssign\nconst emptyOptions = () => ({\n\trules: {},\n\tsettings: {},\n\tglobals: [],\n\tenvs: [],\n\tplugins: [],\n\textends: []\n});\n\nconst buildConfig = opts => {\n\tconst config = deepAssign(\n\t\temptyOptions(),\n\t\tDEFAULT_CONFIG,\n\t\topts\n\t);\n\n\tif (opts.space) {\n\t\tconst spaces = typeof opts.space === 'number' ? opts.space : 2;\n\t\tconfig.rules.indent = ['error', spaces, {SwitchCase: 1}];\n\n\t\t// Only apply if the user has the React plugin\n\t\tif (opts.cwd && resolveFrom(opts.cwd, 'eslint-plugin-react')) {\n\t\t\tconfig.plugins = config.plugins.concat('react');\n\t\t\tconfig.rules['react/jsx-indent-props'] = ['error', spaces];\n\t\t\tconfig.rules['react/jsx-indent'] = ['error', spaces];\n\t\t}\n\t}\n\n\tif (opts.semicolon === false) {\n\t\tconfig.rules.semi = ['error', 'never'];\n\t\tconfig.rules['semi-spacing'] = ['error', {\n\t\t\tbefore: false,\n\t\t\tafter: true\n\t\t}];\n\t}\n\n\tif (opts.esnext !== false) {\n\t\tconfig.baseConfig.extends = ['xo/esnext', path.join(__dirname, 'config/plugins.js')];\n\t}\n\n\tif (opts.rules) {\n\t\tObject.assign(config.rules, opts.rules);\n\t}\n\n\tif (opts.settings) {\n\t\tconfig.baseConfig.settings = opts.settings;\n\t}\n\n\tif (opts.parser) {\n\t\tconfig.baseConfig.parser = opts.parser;\n\t}\n\n\tif (opts.extends && opts.extends.length > 0) {\n\t\t// TODO: this logic needs to be improved, preferably use the same code as ESLint\n\t\t// user's configs must be resolved to their absolute paths\n\t\tconst configs = opts.extends.map(name => {\n\t\t\t// Don't do anything if it's a filepath\n\t\t\tif (pathExists.sync(name)) {\n\t\t\t\treturn name;\n\t\t\t}\n\n\t\t\t// Don't do anything if it's a config from a plugin\n\t\t\tif (name.startsWith('plugin:')) {\n\t\t\t\treturn name;\n\t\t\t}\n\n\t\t\tif (!name.includes('eslint-config-')) {\n\t\t\t\tname = `eslint-config-${name}`;\n\t\t\t}\n\n\t\t\tconst ret = resolveFrom(opts.cwd, name);\n\n\t\t\tif (!ret) {\n\t\t\t\tthrow new Error(`Couldn't find ESLint config: ${name}`);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t});\n\n\t\tconfig.baseConfig.extends = config.baseConfig.extends.concat(configs);\n\t}\n\n\treturn config;\n}\n\n// Builds a list of overrides for a particular path, and a hash value.\n// The hash value is a binary representation of which elements in the `overrides` array apply to the path.\n//\n// If overrides.length === 4, and only the first and third elements apply, then our hash is: 1010 (in binary)\nconst findApplicableOverrides = (path, overrides) => {\n\tlet hash = 0;\n\tconst applicable = [];\n\n\toverrides.forEach(override => {\n\t\thash <<= 1;\n\n\t\tif (multimatch(path, override.files).length > 0) {\n\t\t\tapplicable.push(override);\n\t\t\thash |= 1;\n\t\t}\n\t});\n\n\treturn {\n\t\thash,\n\t\tapplicable\n\t};\n}\n\nconst mergeApplicableOverrides = (baseOptions, applicableOverrides) => {\n\tapplicableOverrides = applicableOverrides.map(normalizeOpts);\n\tconst overrides = [emptyOptions(), baseOptions].concat(applicableOverrides);\n\treturn deepAssign.apply(null, overrides);\n}\n\n// Creates grouped sets of merged options together with the paths they apply to.\nconst groupConfigs = (paths, baseOptions, overrides) => {\n\tconst map = {};\n\tconst arr = [];\n\n\tpaths.forEach(x => {\n\t\tconst data = findApplicableOverrides(x, overrides);\n\n\t\tif (!map[data.hash]) {\n\t\t\tconst mergedOpts = mergeApplicableOverrides(baseOptions, data.applicable);\n\t\t\tdelete mergedOpts.files;\n\n\t\t\tarr.push(map[data.hash] = {\n\t\t\t\topts: mergedOpts,\n\t\t\t\tpaths: []\n\t\t\t});\n\t\t}\n\n\t\tmap[data.hash].paths.push(x);\n\t});\n\n\treturn arr;\n}\n\nconst getIgnores = opts => {\n\topts.ignores = DEFAULT_IGNORE.concat(opts.ignores || []);\n\treturn opts;\n}\n\nconst getGitIgnores = opts => globby\n\t.sync('**/.gitignore', {\n\t\tignore: opts.ignores || [],\n\t\tcwd: opts.cwd || process.cwd()\n\t})\n\t.map(pathToGitignore => {\n\t\tconst patterns = parseGitignore(pathToGitignore);\n\t\tconst base = path.dirname(pathToGitignore);\n\n\t\treturn patterns\n\t\t\t.map(pattern => {\n\t\t\t\tconst negate = !pattern.startsWith('!');\n\t\t\t\tconst patternPath = negate ? pattern : pattern.substr(1);\n\t\t\t\treturn {negate, pattern: path.join(base, patternPath)};\n\t\t\t})\n\t\t\t.sort(pattern => pattern.negate ? 1 : -1)\n\t\t\t.map(item => item.negate ? `!${item.pattern}` : item.pattern);\n\t})\n\t.reduce((a, b) => a.concat(b), []);\n\nconst preprocess = opts => {\n\topts = mergeWithPkgConf(opts);\n\topts = normalizeOpts(opts);\n\topts = getIgnores(opts);\n\topts.extensions = DEFAULT_EXTENSION.concat(opts.extensions || []);\n\n\treturn opts;\n}\n\nexports.DEFAULT_IGNORE = DEFAULT_IGNORE;\nexports.DEFAULT_CONFIG = DEFAULT_CONFIG;\nexports.mergeWithPkgConf = mergeWithPkgConf;\nexports.normalizeOpts = normalizeOpts;\nexports.buildConfig = buildConfig;\nexports.findApplicableOverrides = findApplicableOverrides;\nexports.mergeApplicableOverrides = mergeApplicableOverrides;\nexports.groupConfigs = groupConfigs;\nexports.preprocess = preprocess;\nexports.emptyOptions = emptyOptions;\nexports.getIgnores = getIgnores;\nexports.getGitIgnores = getGitIgnores;\n","/home/travis/build/npmtest/node-npmtest-xo/node_modules/xo/cli.js":"#!/usr/bin/env node\n/* eslint-disable import/order */\n'use strict';\nconst debug = require('debug')('xo');\n\n// Prefer the local installation of XO.\nconst resolveCwd = require('resolve-cwd');\nconst hasFlag = require('has-flag');\n\nconst localCLI = resolveCwd('xo/cli');\n\nif (!hasFlag('no-local') && localCLI && localCLI !== __filename) {\n\tdebug('Using local install of XO.');\n\trequire(localCLI);\n\treturn;\n}\n\nconst path = require('path');\nconst spawn = require('child_process').spawn;\nconst updateNotifier = require('update-notifier');\nconst getStdin = require('get-stdin');\nconst meow = require('meow');\nconst formatterPretty = require('eslint-formatter-pretty');\nconst xo = require('./');\n\nconst cli = meow(`\n\tUsage\n\t  $ xo [<file|glob> ...]\n\n\tOptions\n\t  --init            Add XO to your project\n\t  --fix             Automagically fix issues\n\t  --reporter        Reporter to use\n\t  --env             Environment preset  [Can be set multiple times]\n\t  --global          Global variable  [Can be set multiple times]\n\t  --ignore          Additional paths to ignore  [Can be set multiple times]\n\t  --space           Use space indent instead of tabs  [Default: 2]\n\t  --no-semicolon    Prevent use of semicolons\n\t  --plugin          Include third-party plugins  [Can be set multiple times]\n\t  --extend          Extend defaults with a custom config  [Can be set multiple times]\n\t  --open            Open files with issues in your editor\n\t  --quiet           Show only errors and no warnings\n\t  --extension       Additional extension to lint [Can be set multiple times]\n\t  --no-esnext       Don't enforce ES2015+ rules\n\t  --stdin           Validate/fix code from stdin\n\t  --stdin-filename  Specify a filename for the --stdin option\n\n\tExamples\n\t  $ xo\n\t  $ xo index.js\n\t  $ xo *.js !foo.js\n\t  $ xo --space\n\t  $ xo --env=node --env=mocha\n\t  $ xo --init --space\n\t  $ xo --plugin=react\n\t  $ xo --plugin=html --extension=html\n\t  $ echo 'const x=true' | xo --stdin --fix\n\n\tTips\n\t  Put options in package.json instead of using flags so other tools can read it.\n`, {\n\tstring: [\n\t\t'_'\n\t],\n\tboolean: [\n\t\t'init',\n\t\t'compact',\n\t\t'stdin',\n\t\t'fix',\n\t\t'open'\n\t],\n\talias: {\n\t\t'stdin-filename': 'filename'\n\t}\n});\n\nupdateNotifier({pkg: cli.pkg}).notify();\n\nconst input = cli.input;\nconst opts = cli.flags;\n\nconst log = report => {\n\t// legacy\n\t// TODO: remove in 1.0.0\n\tif (opts.compact) {\n\t\topts.reporter = 'compact';\n\t}\n\n\tconst reporter = opts.reporter ? xo.getFormatter(opts.reporter) : formatterPretty;\n\n\tprocess.stdout.write(reporter(report.results));\n\tprocess.exit(report.errorCount === 0 ? 0 : 1);\n}\n\nconst open = report => {\n\tif (report.errorCount === 0) {\n\t\treturn;\n\t}\n\n\tconst editor = process.env.EDITOR;\n\n\tif (!editor) {\n\t\tconsole.log(`\n\\`open\\` option was used, but your $EDITOR environment variable is empty.\nFix it by setting path to your editor of choice in ~/.bashrc or ~/.zshrc:\n\n    export EDITOR=atom\n`);\n\t\treturn;\n\t}\n\n\tconst executableName = editor.split(path.sep).pop();\n\tconst lineColumn = message => `${message.line}:${message.column}`;\n\tconst args = [];\n\n\treport.results\n\t\t.filter(file => file.errorCount > 0)\n\t\t.forEach(file => {\n\t\t\t// Sublime Text and Atom support opening file at exact position\n\t\t\tif (['subl', 'atom'].indexOf(executableName) >= 0) {\n\t\t\t\targs.push(file.filePath + ':' + lineColumn(file.messages[0]));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// WebStorm supports opening file on a specific line (no column support)\n\t\t\tif (executableName === 'wstorm') {\n\t\t\t\targs.push(file.filePath + ':' + file.messages[0].line);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// TextMate requires a `--line` option\n\t\t\tif (executableName === 'mate') {\n\t\t\t\targs.push('--line', lineColumn(file.messages[0]), file.filePath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\targs.push(file.filePath);\n\t\t});\n\n\tspawn(editor, args, {\n\t\tdetached: true,\n\t\tstdio: 'ignore'\n\t}).unref();\n}\n\n// `xo -` => `xo --stdin`\nif (input[0] === '-') {\n\topts.stdin = true;\n\tinput.shift();\n}\n\nif (opts.init) {\n\trequire('xo-init')();\n} else if (opts.stdin) {\n\tgetStdin().then(str => {\n\t\tif (opts.fix) {\n\t\t\tconsole.log(xo.lintText(str, opts).results[0].output);\n\t\t\treturn;\n\t\t}\n\n\t\tif (opts.open) {\n\t\t\tconsole.error('The `open` option is not supported on stdin');\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tlog(xo.lintText(str, opts));\n\t});\n} else {\n\txo.lintFiles(input, opts).then(report => {\n\t\tif (opts.fix) {\n\t\t\txo.outputFixes(report);\n\t\t}\n\n\t\tif (opts.open) {\n\t\t\topen(report);\n\t\t}\n\n\t\tlog(report);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-xo/node_modules/xo/config/overrides.js":"'use strict';\nmodule.exports = {\n\t// Put rule overrides here\n};\n","/home/travis/build/npmtest/node-npmtest-xo/node_modules/xo/config/plugins.js":"'use strict';\nmodule.exports = {\n\t// Repeated here from eslint-config-xo in case some plugins set something different\n\tparserOptions: {\n\t\tecmaVersion: 2017,\n\t\tsourceType: 'module',\n\t\tecmaFeatures: {\n\t\t\tjsx: true,\n\t\t\texperimentalObjectRestSpread: true\n\t\t}\n\t},\n\t// -- end repeat\n\tplugins: [\n\t\t'no-use-extend-native',\n\t\t'ava',\n\t\t'unicorn',\n\t\t'promise',\n\t\t'import'\n\t],\n\textends: [\n\t\t'plugin:ava/recommended',\n\t\t'plugin:unicorn/recommended'\n\t],\n\tsettings: {\n\t\t'import/core-modules': [\n\t\t\t'electron',\n\t\t\t'atom'\n\t\t]\n\t},\n\trules: {\n\t\t'no-use-extend-native/no-use-extend-native': 'error',\n\t\t'promise/param-names': 'error',\n\t\t// Enable this sometime in the future when Node.js has async/await support\n\t\t// 'promise/prefer-await-to-then': 'error',\n\t\t'import/default': 'error',\n\t\t'import/export': 'error',\n\t\t'import/extensions': ['error', {\n\t\t\tjs: 'never',\n\t\t\tjson: 'never',\n\t\t\tjsx: 'never'\n\t\t}],\n\t\t'import/first': 'error',\n\t\t'import/named': 'error',\n\t\t'import/namespace': ['error', {allowComputed: true}],\n\t\t'import/no-absolute-path': 'error',\n\t\t'import/no-webpack-loader-syntax': 'error',\n\t\t'import/newline-after-import': 'error',\n\t\t'import/no-amd': 'error',\n\t\t'import/no-duplicates': 'error',\n\t\t// Enable this sometime in the future when Node.js has ES2015 module support\n\t\t// 'import/unambiguous': 'error',\n\t\t// enable this sometime in the future when Node.js has ES2015 module support\n\t\t// 'import/no-commonjs': 'error',\n\t\t// looks useful, but too unstable at the moment\n\t\t// 'import/no-deprecated': 'error',\n\t\t'import/no-extraneous-dependencies': 'error',\n\t\t'import/no-mutable-exports': 'error',\n\t\t'import/no-named-as-default-member': 'error',\n\t\t'import/no-named-as-default': 'error',\n\t\t'import/no-unresolved': ['error', {commonjs: true}],\n\t\t'import/order': 'error',\n\t\t'import/prefer-default-export': 'error',\n\t\t'import/no-unassigned-import': 'error'\n\t}\n};\n"}